<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">


    <!-- TabControl theme -->
    <!-- 
         This color will be used to draw a border around the TabControl, on 
         the bottom of the TabItemPanel and on the bottom of unselected TabItems.
      -->
    <Color x:Key="BorderColorBase">#888</Color>
    <!-- 
         This color will be used to draw the (outer) background of TabPages and
         the selected TabItem.
      -->
    <Color x:Key="TabControlBackgroundColorBase">#EEF7FF</Color>

    <!-- Brushes used for styling the TabControl -->
    <SolidColorBrush x:Key="TabControlBackgroundBrushBase" Color="{StaticResource TabControlBackgroundColorBase}" />

    <!-- Brushes used for styling TabItems (Background) -->
    <LinearGradientBrush x:Key="TabItemBackgroundBrushDisabled" StartPoint="0,0" EndPoint="1,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#EEE" Offset="0" />
            <GradientStop Color="#BBB" Offset="0.98" />
            <!-- This is the same trick as with the TabItemPanel_BackgroundBrush (see there). -->
            <GradientStop Color="{StaticResource BorderColorBase}" Offset="0.99" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="TabItemBackgroundBrushSelected"
                         StartPoint="0,0" EndPoint="1,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFFFC14A" Offset="0.1" />
            <GradientStop Color="{StaticResource TabControlBackgroundColorBase}" Offset="0.15" />
            <GradientStop Color="#C5DBF6" Offset="0.8" />
            <GradientStop Color="{x:Static SystemColors.WindowColor}" Offset="1.0" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="TabItemBackgroundBrushUnselected" StartPoint="0,0" EndPoint="1,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#E8F2FF" Offset="0.0" />
            <GradientStop Color="#DFE9F6" Offset="0.3" />
            <GradientStop Color="#C7D8EE" Offset="0.7" />
            <GradientStop Color="#B9CADE" Offset="0.98" />
            <!-- See the TabItemPanel_BackgroundBrush comment. -->
            <GradientStop Color="{StaticResource BorderColorBase}" Offset="0.99" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="TabItemHoverBackgroundBrush"
                         EndPoint="1,0.5" StartPoint="0,0.5">
        <GradientStop Color="#FFFFD5A0" Offset="0.3" />
        <GradientStop Color="#FFFFA335" Offset="0.51" />
        <GradientStop Color="#FFFFC14A" Offset="0.98" />
    </LinearGradientBrush>

    <!-- Brushes used for styling TabItems (Foreground/Text) -->
    <SolidColorBrush x:Key="TabItemTextBrushUnselected" Color="#4971A3" />
    <SolidColorBrush x:Key="TabItemTextBrushDisabled" Color="#888" />
    <SolidColorBrush x:Key="TabItemTextBrushHover" Color="Indigo" />
    <SolidColorBrush x:Key="TabItemTextBrushSelected" Color="Black" />

    <!-- Brushes used for styling TabItems (Borders) -->
    <!-- 
         For all borders around the TabItems, we'll have to use either the 
         identical color OR (what's being done here) we'll have to assure the
         bottom of the border will always result in the color that is being
         used for drawing the line between the TabControl and the TabItemPanel.
      
         If we do use a different (solid) color here, the bottom line will not
         be rendered as desired which I presume is a matter of precedence in the
         way borders are being drawn (anti-clockwise, starting with bottom and
         finishing with left, hence the effect of the left and right edges of 
         the bottom line being drawn with the left and right border respectively).
         If you want to try it out, exchange the LinearGradientBrush with the
         SolidColorBrush that has been commented out and run the app.
         You'll probably have to zoom in to see the effect. 
      -->
    <!--<SolidColorBrush x:Key="TabItem_DisabledBorderBrush" Color="#CCC" />-->
    <LinearGradientBrush x:Key="TabItemDisabledBorderBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientStop Color="#CCC" Offset="0" />
        <GradientStop Color="{StaticResource BorderColorBase}" Offset="0.8" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="TabItemBorderBrushSelected" Color="{StaticResource BorderColorBase}" />
    <!-- See the comment regarding the TabItem_DisabledBorderBrush above. -->
    <LinearGradientBrush x:Key="TabItemBorderUnselected" StartPoint="0,0" EndPoint="1,0">
        <GradientStop Color="#AAA" Offset="0" />
        <GradientStop Color="{StaticResource BorderColorBase}" Offset="0.8" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="TabItemHoverBorderBrush" StartPoint="0,0" EndPoint="1,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Offset="0.98" Color="DarkOrange" />
            <!-- See the TabItemPanel_BackgroundBrush comment. -->
            <GradientStop Offset="0.99" Color="{StaticResource BorderColorBase}" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <!-- Margins for TabItems - these will be set in the respective triggers. -->
    <Thickness x:Key="TabItemMarginBase">4,-1,-1,0</Thickness>
    <Thickness x:Key="TabItemMarginSelected">1,-1,-1,0</Thickness>
    <Thickness x:Key="TabItemMarginHover">4,-1,-1,0</Thickness>

    <ControlTemplate x:Key="ColorfulTabControlTemplate" TargetType="{x:Type TabItem}">
        <!-- The Grid helps defining the general height of TabItems. -->
        <Grid VerticalAlignment="Bottom">
            <!-- 
                        The important aspect here is that the bottom of the Border is 0px thick,
                        helping the TabItem/strip to blend into the TabPage.

                     -->
            <Border Name="Border"
                    Background="{StaticResource TabItemBackgroundBrushUnselected}"
                    BorderBrush="{StaticResource TabItemBorderBrushSelected}"
                    Margin="{StaticResource TabItemMarginSelected}"
                    BorderThickness="1,1,0,1"
                    CornerRadius="4,0,0,4">
                <!-- This is where the Content of the TabItem will be rendered. -->
                <ContentPresenter x:Name="ContentSite"
                                  VerticalAlignment="Center"
                                  HorizontalAlignment="Center"
                                  ContentSource="Header"
                                  Margin="17,13,13,13"
                                  RecognizesAccessKey="True" />
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <!-- The appearance of a TabItem when it's inactive/unselected -->
            <Trigger Property="IsSelected" Value="False">
                <Setter Property="Panel.ZIndex" Value="90" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource TabItemBorderUnselected}" />
                <Setter Property="Foreground" Value="{StaticResource TabItemTextBrushUnselected}" />
                <!-- Except for the selected TabItem, tabs are to appear smaller in height. -->
                <Setter TargetName="Border" Property="Margin" Value="{StaticResource TabItemMarginBase}" />
            </Trigger>

            <!-- 
                        The appearance of a TabItem when it's disabled 
                        (in addition to Selected=False)
                     -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Panel.ZIndex" Value="80" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource TabItemDisabledBorderBrush}" />
                <Setter TargetName="Border" Property="Background"
                        Value="{StaticResource TabItemBackgroundBrushDisabled}" />
                <Setter Property="Foreground" Value="{StaticResource TabItemTextBrushDisabled}" />
            </Trigger>

            <!-- The appearance of a TabItem when the mouse hovers over it -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Border.IsMouseOver" Value="True" />
                    <Condition Property="IsSelected" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Panel.ZIndex" Value="99" />
                <Setter Property="Foreground" Value="{StaticResource TabItemTextBrushHover}" />
                <Setter Property="BorderBrush" TargetName="Border" Value="{StaticResource TabItemHoverBorderBrush}" />
                <Setter Property="Background" TargetName="Border" Value="{StaticResource TabItemHoverBackgroundBrush}" />
                <!-- To further increase the hover-effect, extend the TabItem's height a little
                     more compared to unselected TabItems.
                -->
                <Setter TargetName="Border" Property="Margin" Value="{StaticResource TabItemMarginHover}" />
            </MultiTrigger>

            <!-- The appearance of a TabItem when it's active/selected -->
            <Trigger Property="IsSelected" Value="True">
                <!-- We want the selected TabItem to always be on top. -->
                <Setter Property="Panel.ZIndex" Value="100" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource TabItemBorderBrushSelected}" />
                <Setter TargetName="Border" Property="Background"
                        Value="{StaticResource TabItemBackgroundBrushSelected}" />
                <Setter Property="Foreground" Value="{StaticResource TabItemTextBrushSelected}" />
                <Setter TargetName="Border" Property="Margin" Value="{StaticResource TabItemMarginSelected}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

</ResourceDictionary>